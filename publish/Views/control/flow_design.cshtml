@section template{
<template id="app-main">
    <div class="wln-layout">
        <div id="flowPanel"></div>

        <div class="wln-mask-layout" v-if="mask.node" v-on:click="close">
            <div class="wln-mask-form" style="width:500px;" v-on:click.stop="empty">
                <div class="wln-title">流程设置</div>
                <el-form label-width="120px">
                    <el-form-item label="流程名称">
                        <el-input v-model="node.name" placeholder="必填" style="width:240px"></el-input>
                    </el-form-item>
                    <el-form-item label="审批方式">
                        <el-select v-model="node.mode" style="width:240px">
                            <el-option value="appoint" label="指定成员"></el-option>
                            <el-option value="director" label="主管"></el-option>
                            <el-option value="role" label="角色"></el-option>
                            <el-option value="select" label="发起人自选"></el-option>
                            <el-option value="self" label="发起人自己"></el-option>
                        </el-select>
                        <div v-if="node.mode == 'appoint'" style="margin-top:20px">
                            <el-cascader ref="appoint" :show-all-levels="false" :options="tree" :model="appoint.select" :loading="appoint.loading" :props="appoint.props" style="width:240px"></el-cascader>
                        </div>
                        <div v-if="node.mode == 'self'">
                            发起人自己将作为审批人处理此流程
                        </div>
                    </el-form-item>
                    <el-form-item>
                        <el-button size="small" icon="el-icon-check" type="primary" v-on:click="setNode">提交</el-button>
                        <el-button size="small" icon="el-icon-close" v-on:click="close">取消</el-button>
                    </el-form-item>
                </el-form>
            </div>
        </div>

    </div>
</template>
}
@section style{
<link href="/flow/GooFlow.css" rel="stylesheet" />
<script src="https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"></script>
<script src="/flow/GooFunc.js"></script>
<script src="/flow/GooFlow.js"></script>
<style>
    .GooFlow .item_mix {
        color: #000000;
    }
    .GooFlow .item_round {
        width: 32px;
        height: 32px;
        border-radius: 5px;
    }
    .GooFlow .item_focus.item_round .span {
        top: 35px;
        left: -29px;
        width: 88px;
    }
        .GooFlow .ico i {
            width: 24px;
            height: 24px;
            font-size: 22px;
            line-height: 24px;
        }
</style>
}
@section script{
<script type="text/javascript">
    var vpath = "/@ViewBag.Action";
    var form = { id: '', title: '', content: '', files: '', duration: '', participant: '', participantnames: '' }
    var appMain = Vue.extend({
        template: '#app-main',
        data: function () {
            ds.tree = []
            ds.mask = { node: false }
            ds.node = { id: 0, name: '', mode: '', staff: '', names: '' }
            ds.appoint = {
                loading: false,
                select: [],
                props: {
                    lazy: true,
                    multiple: true,
                    emitPath: false,
                    lazyLoad(node, resolve) {
                        if (node.children && node.children.length > 0) {
                            resolve([]);
                        } else if (node.value) {
                            asyncGet('/dingtalk/contact?dept=' + node.value).then(res => {
                                resolve(res.tree);
                            });
                        }
                    }
                }
            }
            return ds
        },
        methods: {
            empty() { },
            close() {
                this.mask.node = false
            },
            setData(key, json, type) {
                let obj = flowPanel.exportData();
                if (type == 'line' && obj.lines[key]) {

                } else if (obj.nodes[key]) {
                    for (var i in json) {
                        obj.nodes[key][i] = json[i]
                    }
                }
                let str = JSON.stringify(obj)
                flowPanel.clearData()
                flowPanel.loadData(JSON.parse(str))
            },
            setNode() {
                let t = this
                if (t.node.mode == 'appoint') {
                    let nodes = t.$refs.appoint.getCheckedNodes();
                    nodes = nodes.sort((a, b) => a.path.join() - b.path.join()).sort((a, b) => a.path.length - b.path.length);

                    t.node.staff = nodes.map(i => i.path.join('/')).join();
                    t.node.names = nodes.map(i => i.pathLabels[i.pathLabels.length - 1]).join();
                }
                t.setData(t.node.id, t.node);
                t.close()
            },
            load() {
                flowPanel.clearData()
                if (this.$route.query.id || this.$route.query.code) {
                    get(location.pathname + '?do=get', this.$route.query).then(res => {
                        if (res.success) {
                            flowPanel.loadData(JSON.parse(res.content))
                        }
                        if (this.$route.query.id) {
                            Vue.prototype.$message({ type: res.success ? 'success' : 'error', message: res.message })
                        }
                    })
                }
            },
            save() {
                let t = this
                let obj = flowPanel.exportData()
                if (t.$route.query.code) {
                    obj.code = t.$route.query.code
                }
                post(location.pathname + '?do=save', obj).then(res => {
                    Vue.prototype.$message({ type: res.success ? 'success' : 'error', message: res.message })
                })
            }
        },
        mounted() {
            let t = this
            flowPanel = $.createGooFlow($('#flowPanel'), {
                width: document.body.clientWidth,
                height: document.body.clientHeight,
                haveHead: true,
                haveTool: true,
                headLabel: true,
                headBtns: ["rename", "new", "reload", "back", "save"],
                toolBtns: ["start round mix", "node", "join", "fork", "end round mix"],
                haveGroup: false,
                dragAddOper: true,  //使用拖拽添加
                useOperStack: true
            });
            flowPanel.setNodeRemarks({
                cursor: "选择指针",
                direct: "转换连线",
                dashed: "关联虚线",
                start: "开始结点",
                end: "结束结点",
                task: "任务结点",
                node: "任务结点",
                chat: "决策结点",
                state: "状态结点",
                plug: "附加插件",
                fork: "分支结点",
                join: "联合结点",
                complex: "复合结点",
                group: "组织划分框编辑开"
            });
            flowPanel.onItemFocus = (id, type) => {
                let t = this
                let obj = flowPanel.exportData()
                let node = obj.nodes[id]
                if (type === 'node' && node) {
                    t.mask.node = true
                    t.node.id = id;
                    t.node.name = node.name || ''
                    t.node.mode = node.mode || 'appoint'
                    t.node.staff = node.staff || ''
                    t.node.names = node.names || ''
                    if (t.node.mode == 'appoint') {
                        t.appoint.select = []
                        t.appoint.loading = true
                        let values = t.node.staff.split(',');
                        let ids = values.filter(i => i.indexOf('userid_') > 0).map(i => i.split('/')).map(i => i[i.length - 2]);
                        get('/dingtalk/contact?depts=' + ids.join()).then(res => {
                            if (res.success) {
                                t.tree = res.tree;
                                //t.appoint.select = values.map(i => i.split('/'))
                                t.appoint.select = values.filter(i => i.indexOf('userid_') > 0).map(i => i.split('/')).map(i => i[i.length - 1])
                            } else {
                                t.mask.node = false
                            }
                        }).catch(res => { });
                    }
                }

                return true
            }
            flowPanel.onBtnBackClick = (() => { location.href = 'flow_scheme' })
            flowPanel.onBtnNewClick = (() => { flowPanel.clearData() })
            flowPanel.onRenameClick = (() => {
                t.$prompt('请输入流程名称', '', { inputValue: flowPanel.exportData().title }).then(({ value }) => {
                    value && flowPanel.setTitle(value);
                }).catch(() => { });
            })
            flowPanel.onFreshClick = this.load
            flowPanel.onBtnSaveClick = this.save
            flowPanel.onItemRightClick = this.empty
            $(window).resize(() => { flowPanel.reinitSize(document.body.clientWidth, document.body.clientHeight) })
            this.load()
        }
    })
    new Vue({
        el: '#app', router: new VueRouter({
            mode: 'history', routes: [
                { path: vpath, component: appMain }
            ]
        })
    });
</script>
}